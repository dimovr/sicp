(define (cont-frac n d k)
    (cond ((= k 0) 0)
        (else (/ (n k)
            (+ (d k) (cont-frac n d (- k 1)))))))


(define (1/phi k) 
    (cont-frac (lambda (x) 1.0) (lambda (x) 1.0) k))

(define (cont-frac-iter n d k)
    (define (iter k result)
      (cond ((= k 0) result)
            (else (iter (- k 1) 
                        (/ (n k)
                           (+ (d k) result))))))
    (iter k 0))

(define (1/phi-iter k) 
    (cont-frac-iter (lambda (x) 1.0) (lambda (x) 1.0) k))

;;  1 ]=> (phi)
;;  1. -> 2.
;;  2. -> 1.5
;;  1.5 -> 1.6666666666666665
;;  1.6666666666666665 -> 1.6
;;  1.6 -> 1.625
;;  1.625 -> 1.6153846153846154
;;  1.6153846153846154 -> 1.619047619047619
;;  1.619047619047619 -> 1.6176470588235294
;;  1.6176470588235294 -> 1.6181818181818182
;;  1.6181818181818182 -> 1.6179775280898876
;;  1.6179775280898876 -> 1.6180555555555556
;;  1.6180555555555556 -> 1.6180257510729614
;;  ;Value: 1.6180257510729614
        
;;  1 ]=> (1/phi 12)
;;  ;Value: .6180257510729613
    
;;  1 ]=> (* (phi) (1/phi 12))
;;  ;Value: .9999815800622593

;;  1 ]=> (= (1/phi 12) (1/phi-iter 12))
;;  ;Value: #t
